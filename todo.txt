ToDo

- Implement font rendering
	v Generate single font atlas from TTF 
	v Create general font atlas generator pipeline with CMake

- Implement efficient and easy to use rendering framework
	- Implement new renderer
		v refacter rendering pipeline
		v implement index-based rendering
		v implement static general buffer size (eventual automatic resizing as needed)
		v implement single polygon scene without transforms
		v render scene geometries without transforms
		v render scene with a single camera and view transform
		v render scene geometries with transforms
		v optimize rendering engine  
		- make RenderSet max renderables a dynamic value and all required 
			related attributes dynamically allocated
		- implement general texture rendering
v Support diagonal inputs for camera movement
v Create and load a main icon for the game	
v Include application information (from config) in window title
v Fix crash in release mode when creating a new scene (this was caused by create on first use of global objects)
v Implement explicit creation and deletion of all global objects (create on first use is causing major issues)
v Remove IMGUI from the game
v Enable input events and special actions
v Implement new renderer
  v stage 1 - render a single polygon to the window
	v Render a triangle!
  	v Implement a simple shader that works with SDL3
	v Look into the shader cross compiler that can be used with SDL3 (used Vulkan SDK for glsl to spir-v)
	v Integrate shader compilation in CMake
v Transition to SDL3
  v Implement mouse scroll handling
  v Implement keyboard input handling
  v Implement window events
  v Remove all GLFW references outside of window
  v Add SDL3 as a submodule
  v Add SDL3 dependecies
  v Create a window and make sure the program runs
  v Implement four callbacks in separate modules using function forwarding
  v Implement clear screen in SDL3 GPU and Vulkan initialization
  v Get IMGUI and the GUI layer running
  v Get the game running
v Implement untransformed bounding boxes when instantiating the scene
v Render untransformed bounding boxes for each node
v Implement construct on first use
v Fiv memory access violation in release mode
v Enable move camera by right mouse button and drag
v Implement multiple render counters
v Move shaders to geometry renderer
v Implement test outline rendering
v Create outline class derived from renderable
v Refactor polygon generation routines into separate module
v Create renderable, generalization of polygon
v Derive polygon from renderable
v Generalize geometry buffer class to support general renderables
v Implement hierarchical scene rendering with transforms
	v Implement rendering one node at a time with traversal
	v Implement transforms for each node 
	v Implement node updates and rotate deltas (mainly for debugging for now)
	v Optimize rendering by batching nodes that don't need transform
	v Support proper hierarchy in scene loader and rendering
v Ensure Oya is working on the work laptop
v Remove all previous data triggers and listeners
v Remove listeners from the Layer classes
v Implement event system across all of Oya
v Transition back to Visual Studio (needed copilot features are now supported in preview)